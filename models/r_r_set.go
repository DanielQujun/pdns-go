// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RRSet r r set
// swagger:model RRSet

type RRSet struct {

	// MUST be added when updating the RRSet. Must be REPLACE or DELETE. With DELETE, all existing RRs matching name and type will be deleted, including all comments. With REPLACE: when records is present, all existing RRs matching name and type will be deleted, and then new records given in records will be created. If no records are left, any existing comments will be deleted as well. When comments is present, all existing comments for the RRs matching name and type will be deleted, and then new comments given in comments will be created.
	Changetype string `json:"changetype,omitempty"`

	// comments
	Comments RRSetComments `json:"comments"`

	// Name for record set (e.g. “www.powerdns.com.”)
	Name string `json:"name,omitempty"`

	// records
	Records RRSetRecords `json:"records"`

	// DNS TTL of the records, in seconds. MUST NOT be included when changetype is set to “DELETE”.
	TTL int64 `json:"ttl,omitempty"`

	// Type of this record (e.g. “A”, “PTR”, “MX”)
	Type string `json:"type,omitempty"`
}

/* polymorph RRSet changetype false */

/* polymorph RRSet comments false */

/* polymorph RRSet name false */

/* polymorph RRSet records false */

/* polymorph RRSet ttl false */

/* polymorph RRSet type false */

// Validate validates this r r set
func (m *RRSet) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *RRSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RRSet) UnmarshalBinary(b []byte) error {
	var res RRSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
